{"uid":"34a04ae17b2e69ce","name":"selenideUploadTest()","fullName":"qa.file.FileParserTests.selenideUploadTest","historyId":"4020007d5f59ed420a231f1b5aebe30f","time":{"start":1737286156989,"stop":1737286245399,"duration":88410},"description":"","status":"failed","statusMessage":"Element should have text \"The upload is complete!\" {.page}\nElement: '<main class=\"page\" data-astro-cid-bqznipgh>Resumable File Upload Demo\nThis demo is a working and production-ready example for resumable file uploads built using the tus-js-client. It sends your files to our public tusd instance, which is the official reference implementation for the tus protocol, written in the Go programming language.\n⚠️ Please be aware that the uploaded files will be removed from our servers after a few hours, for privacy, and to combat people uploading malicious content.\nInstructions\nSelect a large file.\nWatch it upload for a bit, then close this tab before it finishes.\nCome back to this page, select the same file again and you can resume the upload where it left off.\nInspect the HTTP traffic (see below) to understand how tus works.\nWarning! Either you disabled JavaScript or your browser does not support it. However, this demo requires JavaScript. The buttons below will fail silently unless you activate it, at least for this page.\nSelect a file you want to upload\nHTTP Traffic\nBelow you can find a list of the outgoing HTTP requests and incoming responses that tus is using to upload your files:\nStart an upload to see a list of outgoing HTTP requests and incoming responses.\nCompatibility\nThe tus-js-client used in this demo has been automatically tested and works with the following browsers:\nMicrosoft Edge 12+\nMozilla Firefox 14+\nGoogle Chrome 20+\nSafari 6+\nOpera 12.1+\niOS 6.0+\nAndroid 5.0+\nUsing the X-HTTP-Method-Override header, it’s possible to run tus even on platforms that won’t let you do PUT and PATCH requests.\nSource Code\nThe source code for this demo is available on GitHub.</main>'\nActual value: text=\"Resumable File Upload Demo\nThis demo is a working and production-ready example for resumable file uploads built using the tus-js-client. It sends your files to our public tusd instance, which is the official reference implementation for the tus protocol, written in the Go programming language.\n⚠️ Please be aware that the uploaded files will be removed from our servers after a few hours, for privacy, and to combat people uploading malicious content.\nInstructions\nSelect a large file.\nWatch it upload for a bit, then close this tab before it finishes.\nCome back to this page, select the same file again and you can resume the upload where it left off.\nInspect the HTTP traffic (see below) to understand how tus works.\nWarning! Either you disabled JavaScript or your browser does not support it. However, this demo requires JavaScript. The buttons below will fail silently unless you activate it, at least for this page.\nSelect a file you want to upload\nHTTP Traffic\nBelow you can find a list of the outgoing HTTP requests and incoming responses that tus is using to upload your files:\nStart an upload to see a list of outgoing HTTP requests and incoming responses.\nCompatibility\nThe tus-js-client used in this demo has been automatically tested and works with the following browsers:\nMicrosoft Edge 12+\nMozilla Firefox 14+\nGoogle Chrome 20+\nSafari 6+\nOpera 12.1+\niOS 6.0+\nAndroid 5.0+\nUsing the X-HTTP-Method-Override header, it’s possible to run tus even on platforms that won’t let you do PUT and PATCH requests.\nSource Code\nThe source code for this demo is available on GitHub.\"\nScreenshot: file:/home/runner/work/WebQaGuruMishkaEducation/WebQaGuruMishkaEducation/build/reports/tests/1737286245284.2.png\nPage source: file:/home/runner/work/WebQaGuruMishkaEducation/WebQaGuruMishkaEducation/build/reports/tests/1737286245284.2.html\nTimeout: 10 s.","statusTrace":"Element should have text \"The upload is complete!\" {.page}\nElement: '<main class=\"page\" data-astro-cid-bqznipgh>Resumable File Upload Demo\nThis demo is a working and production-ready example for resumable file uploads built using the tus-js-client. It sends your files to our public tusd instance, which is the official reference implementation for the tus protocol, written in the Go programming language.\n⚠️ Please be aware that the uploaded files will be removed from our servers after a few hours, for privacy, and to combat people uploading malicious content.\nInstructions\nSelect a large file.\nWatch it upload for a bit, then close this tab before it finishes.\nCome back to this page, select the same file again and you can resume the upload where it left off.\nInspect the HTTP traffic (see below) to understand how tus works.\nWarning! Either you disabled JavaScript or your browser does not support it. However, this demo requires JavaScript. The buttons below will fail silently unless you activate it, at least for this page.\nSelect a file you want to upload\nHTTP Traffic\nBelow you can find a list of the outgoing HTTP requests and incoming responses that tus is using to upload your files:\nStart an upload to see a list of outgoing HTTP requests and incoming responses.\nCompatibility\nThe tus-js-client used in this demo has been automatically tested and works with the following browsers:\nMicrosoft Edge 12+\nMozilla Firefox 14+\nGoogle Chrome 20+\nSafari 6+\nOpera 12.1+\niOS 6.0+\nAndroid 5.0+\nUsing the X-HTTP-Method-Override header, it’s possible to run tus even on platforms that won’t let you do PUT and PATCH requests.\nSource Code\nThe source code for this demo is available on GitHub.</main>'\nActual value: text=\"Resumable File Upload Demo\nThis demo is a working and production-ready example for resumable file uploads built using the tus-js-client. It sends your files to our public tusd instance, which is the official reference implementation for the tus protocol, written in the Go programming language.\n⚠️ Please be aware that the uploaded files will be removed from our servers after a few hours, for privacy, and to combat people uploading malicious content.\nInstructions\nSelect a large file.\nWatch it upload for a bit, then close this tab before it finishes.\nCome back to this page, select the same file again and you can resume the upload where it left off.\nInspect the HTTP traffic (see below) to understand how tus works.\nWarning! Either you disabled JavaScript or your browser does not support it. However, this demo requires JavaScript. The buttons below will fail silently unless you activate it, at least for this page.\nSelect a file you want to upload\nHTTP Traffic\nBelow you can find a list of the outgoing HTTP requests and incoming responses that tus is using to upload your files:\nStart an upload to see a list of outgoing HTTP requests and incoming responses.\nCompatibility\nThe tus-js-client used in this demo has been automatically tested and works with the following browsers:\nMicrosoft Edge 12+\nMozilla Firefox 14+\nGoogle Chrome 20+\nSafari 6+\nOpera 12.1+\niOS 6.0+\nAndroid 5.0+\nUsing the X-HTTP-Method-Override header, it’s possible to run tus even on platforms that won’t let you do PUT and PATCH requests.\nSource Code\nThe source code for this demo is available on GitHub.\"\nScreenshot: file:/home/runner/work/WebQaGuruMishkaEducation/WebQaGuruMishkaEducation/build/reports/tests/1737286245284.2.png\nPage source: file:/home/runner/work/WebQaGuruMishkaEducation/WebQaGuruMishkaEducation/build/reports/tests/1737286245284.2.html\nTimeout: 10 s.\n\tat com.codeborne.selenide.impl.WebElementSource.handleError(WebElementSource.java:125)\n\tat com.codeborne.selenide.impl.WebElementSource.checkConditionAndReturnElement(WebElementSource.java:102)\n\tat com.codeborne.selenide.impl.WebElementSource.checkCondition(WebElementSource.java:78)\n\tat com.codeborne.selenide.commands.Should.execute(Should.java:24)\n\tat com.codeborne.selenide.FluentCommand.execute(FluentCommand.java:27)\n\tat com.codeborne.selenide.FluentCommand.execute(FluentCommand.java:19)\n\tat com.codeborne.selenide.commands.Commands.execute(Commands.java:159)\n\tat com.codeborne.selenide.impl.SelenideElementProxy.dispatchAndRetry(SelenideElementProxy.java:131)\n\tat com.codeborne.selenide.impl.SelenideElementProxy.invoke(SelenideElementProxy.java:83)\n\tat jdk.proxy3/jdk.proxy3.$Proxy33.shouldHave(Unknown Source)\n\tat qa.file.FileParserTests.selenideUploadTest(FileParserTests.java:52)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\tat java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)\n\tat java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)\n\tat java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)\n\tat java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)\n\tat java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)\n","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"tag","value":"file-parser-tests"},{"name":"junit.platform.uniqueid","value":"[engine:junit-jupiter]/[class:qa.file.FileParserTests]/[method:selenideUploadTest()]"},{"name":"host","value":"fv-az1278-344"},{"name":"thread","value":"2816@fv-az1278-344.ForkJoinPool-1-worker-10(49)"},{"name":"framework","value":"junit-platform"},{"name":"language","value":"java"},{"name":"package","value":"qa.file.FileParserTests"},{"name":"testClass","value":"qa.file.FileParserTests"},{"name":"testMethod","value":"selenideUploadTest"},{"name":"suite","value":"qa.file.FileParserTests"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":1,"skipped":0,"passed":0,"unknown":0,"total":2},"items":[{"uid":"38386e95fcd3e06e","reportUrl":"https://MishkaKovalQA.github.io/WebQaGuruMishkaEducation/11//#testresult/38386e95fcd3e06e","status":"broken","statusDetails":"Could not start a new session. Possible causes are invalid address of the remote server or browser start-up failure. \nHost info: host: 'fv-az1701-352', ip: '10.1.0.104'","time":{"start":1737228306242,"stop":1737228396444,"duration":90202}}]},"tags":["file-parser-tests"]},"source":"34a04ae17b2e69ce.json","parameterValues":[]}